<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Barry Frost</title>
  <link href="http://barryfrost.com/atom.xml" rel="self" />
  <link href="http://barryfrost.com/" />
  <updated>2011-04-19T21:28:54+01:00</updated>
  <id>http://barryfrost.com/</id>
  <author>
    <name>Barry Frost</name>
    <email>barry@barryfrost.com</email>
  </author>
  
  <entry>
    <title>Sinatra and Heroku tips</title>
    <link href="http://barryfrost.com/articles/sinatra-and-heroku-tips"/>
    <updated>2011-04-19T21:04:00+01:00</updated>
    <id>http://barryfrost.com/sinatra-and-heroku-tips</id>
    <content type="html">&lt;p&gt;While &lt;a href='/articles/a-new-start'&gt;building this site&lt;/a&gt; I read several useful articles that promoted best practices for &lt;a href='http://sinatrarb.com/'&gt;Sinatra&lt;/a&gt; and &lt;a href='http://www.heroku.com/'&gt;Heroku&lt;/a&gt;. What follows are fairly raw tips and code snippets that I found useful and might be handy for you.&lt;/p&gt;

&lt;h2 id='use_bundler_for_your_gems'&gt;Use Bundler for your gems&lt;/h2&gt;

&lt;p&gt;Some of the older Heroku documentation suggests using a &lt;code&gt;.gems&lt;/code&gt; file. At the time of writing, best practice is to &lt;a href='http://devcenter.heroku.com/articles/bundler'&gt;use Bundler&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gem install bundler&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a file called &lt;code&gt;Gemfile&lt;/code&gt; in your application root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source :gemcutter
gem &amp;#39;sinatra&amp;#39;
# add any other gems you need here&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle install&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;#8217;t forget to add the &lt;code&gt;Gemfile&lt;/code&gt; and &lt;code&gt;Gemfile.lock&lt;/code&gt; to your repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add Gemfile Gemfile.lock
$ git commit -m &amp;quot;Adding Gemfile and Gemfile.lock for Bundler.&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you come to deploy your application Heroku will pick these files up and install any dependencies your application needs. Magic.&lt;/p&gt;

&lt;p&gt;Further information is in the &lt;a href='http://devcenter.heroku.com/articles/bundler'&gt;Heroku Bundler article&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id='use_memcached_to_store_page_content'&gt;Use memcached to store page content&lt;/h2&gt;

&lt;p&gt;In your &lt;code&gt;configure&lt;/code&gt; block add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;configure do
  ...
  require &amp;#39;memcached&amp;#39;
  CACHE = Memcached.new
  ...
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in actions where you want to save the content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get &amp;#39;/&amp;#39; do
  begin
    content = CACHE.get(&amp;quot;home&amp;quot;)
  rescue Memcached::NotFound
    content = erb(:home)
    CACHE.set(&amp;quot;home&amp;quot;, content)
  end
  content
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;#8217;ll need to make sure you have a local Memcached instance running while developing. I leave this running in a Terminal window via &lt;code&gt;memcached -vv&lt;/code&gt; to get verbose debugging output.&lt;/p&gt;

&lt;h2 id='use_herokus_varnish_caching'&gt;Use Heroku&amp;#8217;s Varnish caching&lt;/h2&gt;

&lt;p&gt;Heroku includes a built-in server-side page cache. If you set HTTP headers in your response then Varnish will do the rest. I&amp;#8217;ve set up a simple helper for this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;helpers do
  ...
  def cache_for(mins = 1)
    if settings.environment != :development
      response[&amp;#39;Cache-Control&amp;#39;] = &amp;quot;public, max-age=#{60*mins}&amp;quot;
    end
  end
  ...
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because browsers also pick up on these cache directives you get the double benefit of your visitors&amp;#8217; browsers caching pages, plus the server.&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t want the caching to kick in when developing, however, so only do this when not in development mode.&lt;/p&gt;

&lt;h2 id='escape_variables_output_in_html'&gt;Escape variables output in HTML&lt;/h2&gt;

&lt;p&gt;When outputting content, especially anything entered by a user, it&amp;#8217;s best to escape it to prevent malicious users stealing cookies or other bad behaviour. In your controller, include the following in your &lt;code&gt;helpers&lt;/code&gt; block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;helpers do
  ...
  include Rack::Utils
  alias_method :h, :escape_html
  ...
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, in your view, you can escape any variable as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;%= h @my_potentially_naughty_variable %&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='use_utf8'&gt;Use UTF-8&lt;/h2&gt;

&lt;p&gt;You want to use UTF-8 right?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Save your pages as UTF-8, whenever you can.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;#8211;&lt;a href='http://www.w3.org/International/tutorials/tutorial-char-enc/'&gt;W3C Internationalization tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add this &lt;code&gt;before&lt;/code&gt; block and forget about it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;before do
  ...
  headers &amp;quot;Content-Type&amp;quot; =&amp;gt; &amp;quot;text/html; charset=utf-8&amp;quot;
  ...
end&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='miscellany'&gt;Miscellany&lt;/h2&gt;

&lt;p&gt;Other useful things I found:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In Ruby, if you want to use a substring, you can simply treat a string as an array (almost everything&amp;#8217;s an object). So, for example, &lt;code&gt;&amp;quot;Barry Frost&amp;quot;[0..4]&lt;/code&gt; == &lt;code&gt;&amp;quot;Barry&amp;quot;&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;Learn to use the ternary operator. Code becomes much more readable as a result, e.g. &lt;code&gt;content = @items.length &amp;gt; 0 ? erb(:index, :layout =&amp;gt; !request.xhr?) : &amp;#39;&amp;#39;&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;Having &lt;code&gt;irb&lt;/code&gt; to hand to try out code without a compile/page reload cycle is so refreshing. Try out and debug regular expressions before writing any code.&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>A new start</title>
    <link href="http://barryfrost.com/articles/a-new-start"/>
    <updated>2011-04-18T22:41:00+01:00</updated>
    <id>http://barryfrost.com/a-new-start</id>
    <content type="html">&lt;p&gt;Earlier this year, back in January in fact, I had a few nagging aims/resolutions on my to-do list. I wanted to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improve my rusty and weak Ruby&lt;/li&gt;

&lt;li&gt;Migrate from Subversion to git and put some code up on &lt;a href='http://github.com/barryf'&gt;GitHub&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Try out &lt;a href='http://sinatrarb.com/'&gt;Sinatra&lt;/a&gt;, a lightweight Ruby web framework built on &lt;a href='http://rack.rubyforge.org/'&gt;Rack&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Investigate &lt;a href='http://www.heroku.com/'&gt;Heroku&lt;/a&gt; for hosting something in Ruby&lt;/li&gt;

&lt;li&gt;Get blogging! For the occasions when I have something to share&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Meanwhile my personal website had become rather clunky, outdated and in dire need of a refresh.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What made it click for me was programming in anger. &amp;#8230; When youâ€™re learning on a mission, the order of things come really naturally.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;#8211;&lt;a href='http://37signals.com/svn/posts/2582-how-do-i-learn-to-program'&gt;David Heinemeier Hansson, 37signals&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As DHH wrote, the best way to learn a programming language or technology is to build something real. So I set about killing multiple birds with one stone by learning and experimenting while dragging my website into the two-thousand-and-tens.&lt;/p&gt;

&lt;p&gt;This website is the end result. Here&amp;#8217;s a screenshot from the new homepage, captured as I write this:&lt;/p&gt;

&lt;p&gt;&lt;img src='http://dl.dropbox.com/u/207451/Screenshots/barryfrost.com_redesign_apr_2011.png' alt='April 2011 screenshot of barryfrost.com' /&gt;&lt;/p&gt;

&lt;h2 id='design_and_concept'&gt;Design and concept&lt;/h2&gt;

&lt;p&gt;Back before &lt;a href='http://techcrunch.com/2009/08/10/facebook-acquires-friendfeed/'&gt;FriendFeed was gobbled up by Facebook&lt;/a&gt;, lifestream services were &lt;a href='http://techcrunch.com/2008/03/10/watch-out-friendfeed-socialthing-is-even-easier-to-use/'&gt;hot&lt;/a&gt;. I&amp;#8217;ve used Twitter, Delicious, Last.fm, Flickr and others for several years and there&amp;#8217;s a lot of content and attention data I&amp;#8217;ve accumulated with third parties. I wanted to aggregate my decentralised data into a chronological stream on my own site, as much for my own interest as a potentially useful collection for visitors inexplicably interested in what I do.&lt;/p&gt;

&lt;p&gt;A couple of years ago I knocked up a design for a stream with indenting and colour-coding for each service. Tweaking this prototype a bit, it formed the central theme for the redesign. Articles would also be pulled in and listed via this &amp;#8220;hub&amp;#8221;.&lt;/p&gt;

&lt;p&gt;I used this redesign as a good opportunity to play with web fonts &amp;#8211; &lt;a href='http://typekit.com/fonts/lft-etica-web'&gt;LFT Etica Web&lt;/a&gt; through &lt;a href='http://typekit.com/'&gt;Typekit&lt;/a&gt; &amp;#8211; and HTML5 markup (e.g. &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tags) and some new-to-me CSS in terms of text shadows and &lt;code&gt;position: fixed&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve also experimented with &lt;a href='http://mediaqueri.es/'&gt;media queries&lt;/a&gt; so that when the page is resized or displayed on small screens the layout and content adjusts via CSS.&lt;/p&gt;

&lt;h2 id='hosting_with_heroku'&gt;Hosting with Heroku&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;m hosting everything with &lt;a href='http://www.heroku.com/'&gt;Heroku&lt;/a&gt;, a ridiculously simple Ruby hosting platform that&amp;#8217;s built on top of Amazon&amp;#8217;s infrastructure. Deploying is simply a matter of a &lt;code&gt;git push heroku master&lt;/code&gt; and you&amp;#8217;re given a wealth of &lt;a href='http://addons.heroku.com/'&gt;add-on services&lt;/a&gt; to choose from that require zero-setup.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m using PostgreSQL to store my stream data and sort by date/source, although you can also use Redis, CouchDB and other popular nosql engines with Heroku if you only need key/value pairs. MySQL isn&amp;#8217;t available, but that&amp;#8217;s not a big problem for a greenfield project like this and it&amp;#8217;s fun to be using the very able PostgreSQL RDBMS again.&lt;/p&gt;

&lt;p&gt;Whole page content variables are cached with the built-in Memcached store for performance and I&amp;#8217;m also making thorough use of cache-control headers which are picked up by Heroku&amp;#8217;s Varnish layer and also client browsers. If I&amp;#8217;m ever lucky enough to be Fireballed, Slashdotted, Reditted or HackerNews&amp;#8217;d I&amp;#8217;ve got multiple layers of caching protection for almost no effort.&lt;/p&gt;

&lt;h2 id='blogging_with_jekyll'&gt;Blogging with Jekyll&lt;/h2&gt;

&lt;p&gt;I wanted to start a blog. I knew that I wouldn&amp;#8217;t go from never blogging to become prolific, but for the rare occasions when I do have something to share, I wanted an outlet.&lt;/p&gt;

&lt;p&gt;Initially I flirted with the idea of using a hosted blog system like Wordpress, Tumblr or Posterous but this seemed overkill. As a sometime hacker I wanted something I could tinker with and that I could host with the main site on Heroku. Using a separate domain (or subdomain) with an external service felt unnecessarily messy.&lt;/p&gt;

&lt;p&gt;Searching around I (re)read &lt;a href='http://tom.preston-werner.com/'&gt;Tom Preston-Werner&lt;/a&gt;&amp;#8217;s &lt;a href='http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html'&gt;Blogging Like a Hacker&lt;/a&gt; post which describes his desire for a lo-fi solution that resulted in &lt;a href='http://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt;. Bingo. Jekyll means I can write articles in &lt;a href='http://simplenoteapp.com/'&gt;Simplenote&lt;/a&gt; or Textmate in &lt;a href='http://daringfireball.net/projects/markdown/'&gt;Markdown&lt;/a&gt;, run them through the Jekyll server which generates simple static HTML files and an Atom feed. I then deploy all these via Git to my site and Sinatra serves them up.&lt;/p&gt;

&lt;h2 id='stream_in_ruby'&gt;Stream in Ruby&lt;/h2&gt;

&lt;p&gt;The Sinatra app is &lt;a href='http://github.com/barryf/barryfrost.com'&gt;fairly simple&lt;/a&gt;: a collection of fetchers pull down JSON feeds from each of the services and insert new items into a table. The results are pulled out and aggregated into the stream.&lt;/p&gt;

&lt;p&gt;For tweets in the stream, I&amp;#8217;ve linked up usernames, links and hashtags. Any links with redirects that have been shortened are followed to get the canonical URL. Plus all links are sent to &lt;a href='http://oohembed.com/'&gt;oohEmbed&lt;/a&gt; to see if they support oEmbed and there&amp;#8217;s a thumbnail to display, for example with &lt;a href='http://twitpic.com/'&gt;Twitpic&lt;/a&gt; images.&lt;/p&gt;

&lt;h2 id='whats_left'&gt;What&amp;#8217;s left&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;ve brushed up on Ruby, but I neglected to spend any time on tests. Naughty Barry. Rather than go back and retrospectively add them, I&amp;#8217;ll set myself a new project to apply good TDD principles.&lt;/p&gt;

&lt;p&gt;You can find all the code in my &lt;a href='http://github.com/barryf/barryfrost.com'&gt;repo on GitHub&lt;/a&gt;. Feel free to poke around and fork but please don&amp;#8217;t steal my design or stylesheets.&lt;/p&gt;</content>
  </entry>
  
</feed>