[
 
   {
     "id": "/a-new-start",
     "title": "A new start",
     "url": "http://barryfrost.com/articles/a-new-start",
     "posted": "2011-04-18T22:41:00+01:00",
     "summary": "Earlier this year, back in January in fact, I had a few nagging aims/resolutions on my to-do list. I wanted...",
     "content": "&lt;p&gt;Earlier this year, back in January in fact, I had a few nagging aims/resolutions on my to-do list. I wanted to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Improve my rusty and weak Ruby&lt;/li&gt;&lt;li&gt;Migrate from Subversion to git and put some code up on &lt;a href='http://github.com/barryf'&gt;GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Try out &lt;a href='http://sinatrarb.com/'&gt;Sinatra&lt;/a&gt;, a lightweight Ruby web framework built on &lt;a href='http://rack.rubyforge.org/'&gt;Rack&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Investigate &lt;a href='http://www.heroku.com/'&gt;Heroku&lt;/a&gt; for hosting something in Ruby&lt;/li&gt;&lt;li&gt;Get blogging! For the occasions when I have something to share&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Meanwhile my personal website had become rather clunky, outdated and in dire need of a refresh.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;What made it click for me was programming in anger. &amp;#8230; When youâ€™re learning on a mission, the order of things come really naturally.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&amp;#8211;&lt;a href='http://37signals.com/svn/posts/2582-how-do-i-learn-to-program'&gt;David Heinemeier Hansson, 37signals&lt;/a&gt;&lt;/p&gt;&lt;p&gt;As DHH wrote, the best way to learn a programming language or technology is to build something real. So I set about killing multiple birds with one stone by learning and experimenting while dragging my website into the two-thousand-and-tens.&lt;/p&gt;&lt;p&gt;This website is the end result. Here&amp;#8217;s a screenshot from the new homepage, captured as I write this:&lt;/p&gt;&lt;p&gt;&lt;img src='http://dl.dropbox.com/u/207451/Screenshots/barryfrost.com_redesign_apr_2011.png' alt='April 2011 screenshot of barryfrost.com' /&gt;&lt;/p&gt;&lt;h2 id='design_and_concept'&gt;Design and concept&lt;/h2&gt;&lt;p&gt;Back before &lt;a href='http://techcrunch.com/2009/08/10/facebook-acquires-friendfeed/'&gt;FriendFeed was gobbled up by Facebook&lt;/a&gt;, lifestream services were &lt;a href='http://techcrunch.com/2008/03/10/watch-out-friendfeed-socialthing-is-even-easier-to-use/'&gt;hot&lt;/a&gt;. I&amp;#8217;ve used Twitter, Delicious, Last.fm, Flickr and others for several years and there&amp;#8217;s a lot of content and attention data I&amp;#8217;ve accumulated with third parties. I wanted to aggregate my decentralised data into a chronological stream on my own site, as much for my own interest as a potentially useful collection for visitors inexplicably interested in what I do.&lt;/p&gt;&lt;p&gt;A couple of years ago I knocked up a design for a stream with indenting and colour-coding for each service. Tweaking this prototype a bit, it formed the central theme for the redesign. Articles would also be pulled in and listed via this &amp;#8220;hub&amp;#8221;.&lt;/p&gt;&lt;p&gt;I used this redesign as a good opportunity to play with web fonts &amp;#8211; &lt;a href='http://typekit.com/fonts/lft-etica-web'&gt;LFT Etica Web&lt;/a&gt; through &lt;a href='http://typekit.com/'&gt;Typekit&lt;/a&gt; &amp;#8211; and HTML5 markup (e.g. &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tags) and some new-to-me CSS in terms of text shadows and &lt;code&gt;position: fixed&lt;/code&gt; elements.&lt;/p&gt;&lt;p&gt;I&amp;#8217;ve also experimented with &lt;a href='http://mediaqueri.es/'&gt;media queries&lt;/a&gt; so that when the page is resized or displayed on small screens the layout and content adjusts via CSS.&lt;/p&gt;&lt;h2 id='hosting_with_heroku'&gt;Hosting with Heroku&lt;/h2&gt;&lt;p&gt;I&amp;#8217;m hosting everything with &lt;a href='http://www.heroku.com/'&gt;Heroku&lt;/a&gt;, a ridiculously simple Ruby hosting platform that&amp;#8217;s built on top of Amazon&amp;#8217;s infrastructure. Deploying is simply a matter of a &lt;code&gt;git push heroku master&lt;/code&gt; and you&amp;#8217;re given a wealth of &lt;a href='http://addons.heroku.com/'&gt;add-on services&lt;/a&gt; to choose from that require zero-setup.&lt;/p&gt;&lt;p&gt;I&amp;#8217;m using PostgreSQL to store my stream data and sort by date/source, although you can also use Redis, CouchDB and other popular nosql engines with Heroku if you only need key/value pairs. MySQL isn&amp;#8217;t available, but that&amp;#8217;s not a big problem for a greenfield project like this and it&amp;#8217;s fun to be using the very able PostgreSQL RDBMS again.&lt;/p&gt;&lt;p&gt;Whole page content variables are cached with the built-in Memcached store for performance and I&amp;#8217;m also making thorough use of cache-control headers which are picked up by Heroku&amp;#8217;s Varnish layer and also client browsers. If I&amp;#8217;m ever lucky enough to be Fireballed, Slashdotted, Reditted or HackerNews&amp;#8217;d I&amp;#8217;ve got multiple layers of caching protection for almost no effort.&lt;/p&gt;&lt;h2 id='blogging_with_jekyll'&gt;Blogging with Jekyll&lt;/h2&gt;&lt;p&gt;I wanted to start a blog. I knew that I wouldn&amp;#8217;t go from never blogging to become prolific, but for the rare occasions when I do have something to share, I wanted an outlet.&lt;/p&gt;&lt;p&gt;Initially I flirted with the idea of using a hosted blog system like Wordpress, Tumblr or Posterous but this seemed overkill. As a sometime hacker I wanted something I could tinker with and that I could host with the main site on Heroku. Using a separate domain (or subdomain) with an external service felt unnecessarily messy.&lt;/p&gt;&lt;p&gt;Searching around I (re)read &lt;a href='http://tom.preston-werner.com/'&gt;Tom Preston-Werner&lt;/a&gt;&amp;#8217;s &lt;a href='http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html'&gt;Blogging Like a Hacker&lt;/a&gt; post which describes his desire for a lo-fi solution that resulted in &lt;a href='http://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt;. Bingo. Jekyll means I can write articles in &lt;a href='http://simplenoteapp.com/'&gt;Simplenote&lt;/a&gt; or Textmate in &lt;a href='http://daringfireball.net/projects/markdown/'&gt;Markdown&lt;/a&gt;, run them through the Jekyll server which generates simple static HTML files and an Atom feed. I then deploy all these via Git to my site and Sinatra serves them up.&lt;/p&gt;&lt;h2 id='stream_in_ruby'&gt;Stream in Ruby&lt;/h2&gt;&lt;p&gt;The Sinatra app is &lt;a href='http://github.com/barryf/barryfrost.com'&gt;fairly simple&lt;/a&gt;: a collection of fetchers pull down JSON feeds from each of the services and insert new items into a table. The results are pulled out and aggregated into the stream.&lt;/p&gt;&lt;p&gt;For tweets in the stream, I&amp;#8217;ve linked up usernames, links and hashtags. Any links with redirects that have been shortened are followed to get the canonical URL. Plus all links are sent to &lt;a href='http://oohembed.com/'&gt;oohEmbed&lt;/a&gt; to see if they support oEmbed and there&amp;#8217;s a thumbnail to display, for example with &lt;a href='http://twitpic.com/'&gt;Twitpic&lt;/a&gt; images.&lt;/p&gt;&lt;h2 id='whats_left'&gt;What&amp;#8217;s left&lt;/h2&gt;&lt;p&gt;I&amp;#8217;ve brushed up on Ruby, but I neglected to spend any time on tests. Naughty Barry. Rather than go back and retrospectively add them, I&amp;#8217;ll set myself a new project to apply good TDD principles.&lt;/p&gt;&lt;p&gt;You can find all the code in my &lt;a href='http://github.com/barryf/barryfrost.com'&gt;repo on GitHub&lt;/a&gt;. Feel free to poke around and fork but please don&amp;#8217;t steal my design or stylesheets.&lt;/p&gt;"
   }
   
 
]
